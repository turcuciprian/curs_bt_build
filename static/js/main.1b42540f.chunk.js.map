{"version":3,"sources":["serviceWorker.js","styles/App.js","actions/actionTypes.js","reducers/reducer.js","components/index.js","components/SelectedCurrencies.js","actions/actionCreators.js","useApiReducer.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","AppWrapper","styled","div","AppHeader","AppButton","button","ListCell","ListElement","li","FETCHING","type","SUCCESS","ERROR","SELECTED","initialState","status","response","selected","myContext","createContext","reducer","state","payload","SelectedCurrencies","tempContext","useContext","selectedCurrenciesData","JSON","parse","data","echangeRates","console","log","length","map","item","index","key","name","buy","value","sell","fetching","success","error","useApiRequest","endpoint","verb","params","useReducer","dispatch","makeRequest","useCallback","a","axios","App","Provider","useEffect","onClick","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1b42540f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const AppWrapper = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nexport const AppHeader = styled.div`\r\n  background-color: #282c34;\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: calc(10px + 2vmin);\r\n  color: white;\r\n`;\r\n\r\nexport const AppButton = styled.button`\r\n  padding: 10px 30px;\r\n  background: blue;\r\n  color: white;\r\n`;\r\n\r\nexport const ListCell = styled.div`\r\n  display: inline-block;\r\n  padding: 5px 10px;\r\n  margin: 10px;\r\n  min-width: 100px;\r\n`;\r\n\r\nexport const ListElement = styled.li`\r\n  list-style-type: none;\r\n  margin: 10px 0px;\r\n  background: #000;\r\n`;\r\n","const apiPrefix = \"useApiRequest/\";\r\nconst selectedPref = \"selectedData/\";\r\nexport const FETCHING = () => ({ type: `${apiPrefix}FETCHING` });\r\nexport const SUCCESS = () => ({ type: `${apiPrefix}SUCCESS` });\r\nexport const ERROR = () => ({ type: `${apiPrefix}ERROR` });\r\nexport const SELECTED = () => ({ type: `${selectedPref}SELECTED` });\r\n","import { createContext } from \"react\";\r\nimport { FETCHING, SUCCESS, ERROR, SELECTED } from \"../actions/actionTypes\";\r\nexport const initialState = {\r\n  status: null,\r\n  response: null,\r\n  selected: null\r\n};\r\n\r\nexport const myContext = createContext(initialState);\r\nexport const reducer = (state = initialState, { type, response } = {}) => {\r\n  //\r\n  switch (type) {\r\n    case FETCHING:\r\n      return { ...initialState, status: FETCHING };\r\n    case SUCCESS:\r\n      return { ...state, status: SUCCESS, response };\r\n    case ERROR:\r\n      return { ...state, status: ERROR, response };\r\n    case SELECTED:\r\n      return { ...initialState, status: SELECTED, payload: state };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import SelectedCurrencies from \"./SelectedCurrencies\";\r\n\r\nexport default SelectedCurrencies;\r\n","import React, { useContext } from \"react\";\r\nimport { myContext } from \"../reducers/reducer\";\r\nimport { ListCell, ListElement } from \"../styles/App\";\r\n\r\nconst SelectedCurrencies = () => {\r\n  const tempContext = useContext(myContext);\r\n  const selectedCurrenciesData =\r\n    tempContext && tempContext.response\r\n      ? JSON.parse(tempContext.response.data.echangeRates)\r\n      : [];\r\n  // eslint-disable-next-line no-console\r\n  console.log(selectedCurrenciesData);\r\n\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {selectedCurrenciesData.length > 0\r\n          ? selectedCurrenciesData.map((item, index) => {\r\n              return (\r\n                <ListElement key={`currency$Key${index}`}>\r\n                  <ListCell>{item.name}</ListCell>\r\n                  <ListCell>{item.buy.value}</ListCell>\r\n                  <ListCell>{item.sell.value}</ListCell>\r\n                </ListElement>\r\n              );\r\n            })\r\n          : \"\"}\r\n        <li></li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectedCurrencies;\r\n","import { SUCCESS, FETCHING, ERROR } from \"./actionTypes\";\r\n\r\nexport const fetching = () => ({ type: FETCHING });\r\nexport const success = response => ({ type: SUCCESS, response });\r\nexport const error = response => ({ type: ERROR, response });\r\nexport const selected = payload => ({ type: ERROR, payload });\r\n","import { useReducer, useCallback } from \"react\";\r\nimport axios from \"axios\";\r\nimport { reducer, initialState } from \"./reducers/reducer\";\r\nimport { fetching, success, error } from \"./actions/actionCreators\";\r\n\r\nconst useApiRequest = (endpoint, { verb = \"get\", params = {} } = {}) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  const makeRequest = useCallback(async () => {\r\n    dispatch(fetching());\r\n    try {\r\n      const response = await axios[verb](endpoint, params);\r\n      dispatch(success(response));\r\n    } catch (e) {\r\n      dispatch(error(e));\r\n    }\r\n  }, [endpoint, verb, params]);\r\n  return [state, makeRequest];\r\n};\r\n\r\nexport default useApiRequest;\r\n","import React, { useEffect } from \"react\";\r\n\r\nimport { AppWrapper, AppHeader, AppButton } from \"./styles/App\";\r\nimport SelectedCurrencies from \"./components\";\r\nimport { myContext } from \"./reducers/reducer\";\r\nimport useApiRequest from \"./useApiReducer\";\r\n\r\nfunction App() {\r\n  const { Provider } = myContext;\r\n  const [{ status, response }, makeRequest] = useApiRequest(\r\n    \"https://cursbtserver.herokuapp.com/latest\"\r\n  );\r\n  useEffect(() => {\r\n    makeRequest();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  return (\r\n    <Provider value={{ status, response }}>\r\n      <AppWrapper>\r\n        <AppHeader>\r\n          <AppButton onClick={makeRequest}>Refresh</AppButton>\r\n          <SelectedCurrencies />\r\n        </AppHeader>\r\n      </AppWrapper>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}