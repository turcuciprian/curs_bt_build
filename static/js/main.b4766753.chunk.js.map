{"version":3,"sources":["serviceWorker.js","styles/App.js","actions/actionTypes.js","reducers/reducer.js","components/index.js","components/SelectedCurrencies.js","actions/actionCreators.js","customHooks/useApiReducer.js","components/customModal.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","AppWrapper","styled","div","AppHeader","AppButton","button","RowCell","RowElement","FETCHING","type","SUCCESS","ERROR","SELECTED","initialState","status","response","saved","myContext","createContext","reducer","state","SelectedCurrencies","tempContext","useContext","savedCurrenciesData","allCurrencies","data","exchangeRates","JSON","parse","customList","length","map","item","index","lenght","content","key","individualCurrency","filter","globalItem","name","className","buy","value","sell","Identifier","placeholder","items","onSort","sortedList","newSavedCurrenciesData","addCurrencies","reactLocalStorage","setObject","dropBackTransitionDuration","fetching","success","error","selected","useApiRequest","endpoint","verb","params","useReducer","dispatch","makeRequest","useCallback","a","axios","addCurrency","newItem","newSavedList","indexExists","indexOf","splice","push","allItems","CustomModal","selectedCurrenciesData","useModal","isOpen","ariaHideApp","onClick","hideModal","showModal","App","Provider","useEffect","savedCurrencies","getObject","undefined","document","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b4766753.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const AppWrapper = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nexport const AppHeader = styled.div`\r\n  background-color: #ffffff;\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: calc(10px + 2vmin);\r\n  color: #000;\r\n  .draggable {\r\n    :hover {\r\n      cursor: grab;\r\n    }\r\n    .RowCell {\r\n      padding: 0px 5px;\r\n      margin: 0 5px;\r\n      min-width: 40px;\r\n      grid-column-start: span 1 / span 1;\r\n      text-align: center;\r\n    }\r\n    background: #464646;\r\n    :nth-child(2) {\r\n      background: #000;\r\n    }\r\n    &.dragged {\r\n      min-width: 380px;\r\n      display: block;\r\n      overflow: hidden;\r\n      list-style-type: none;\r\n      margin: 10px 0px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const AppButton = styled.button`\r\n  padding: 10px 30px;\r\n  display: inline-block;\r\n  background: grey;\r\n  margin: 5px;\r\n  color: white;\r\n  &.add {\r\n    background: green;\r\n    margin-left: 20px;\r\n  }\r\n  &.selected {\r\n    background: green;\r\n    color: #fff;\r\n  }\r\n`;\r\nexport const CurrencyButton = styled.button`\r\n  margin: 10px;\r\n  padding: 10px;\r\n  background-color: blue;\r\n  color: hsl(300, 100%, 90%);\r\n`;\r\n\r\nexport const RowCell = styled.div``;\r\n\r\nexport const RowElement = styled.div`\r\n  display: block;\r\n  overflow: hidden;\r\n  list-style-type: none;\r\n  margin: 10px 0px;\r\n  background: #000;\r\n  color: #fff;\r\n  font-size: 32px;\r\n  background: #000;\r\n  grid-template-columns: repeat(3, minmax(0, 1fr));\r\n  display: grid;\r\n  /* font-size: 24px;\r\n    font-weight: bold;\r\n    background: #fff; */\r\n\r\n  ${RowCell} {\r\n    color: #000;\r\n    background: #fff;\r\n  }\r\n`;\r\n","const apiPrefix = \"useApiRequest/\";\r\nconst selectedPref = \"selectedData/\";\r\nexport const FETCHING = () => ({ type: `${apiPrefix}FETCHING` });\r\nexport const SUCCESS = () => ({ type: `${apiPrefix}SUCCESS` });\r\nexport const ERROR = () => ({ type: `${apiPrefix}ERROR` });\r\nexport const SELECTED = () => ({ type: `${selectedPref}SELECTED` });\r\n","import { createContext } from \"react\";\r\n// eslint-disable-next-line import/newline-after-import\r\nimport { FETCHING, SUCCESS, ERROR, SELECTED } from \"../actions/actionTypes\";\r\nexport const initialState = {\r\n  status: null,\r\n  response: null,\r\n  saved: null\r\n};\r\n\r\nexport const myContext = createContext();\r\nexport const reducer = (\r\n  state = initialState,\r\n  { type, response, saved } = {}\r\n) => {\r\n  //\r\n  switch (type) {\r\n    case FETCHING:\r\n      return { ...initialState, status: FETCHING };\r\n    case SUCCESS:\r\n      return { ...state, status: SUCCESS, response };\r\n    case ERROR:\r\n      return { ...state, status: ERROR, response };\r\n    case SELECTED:\r\n      return { ...state, status: SELECTED, saved };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import SelectedCurrencies from \"./SelectedCurrencies\";\r\n\r\nexport default SelectedCurrencies;\r\n","import React, { useContext } from \"react\";\r\nimport DragSortableList from \"react-drag-sortable\";\r\nimport { reactLocalStorage } from \"reactjs-localstorage\";\r\nimport { myContext } from \"../reducers/reducer\";\r\nimport { RowCell, RowElement } from \"../styles/App\";\r\n\r\nconst SelectedCurrencies = () => {\r\n  const tempContext = useContext(myContext);\r\n  const savedCurrenciesData =\r\n    tempContext && tempContext.saved ? tempContext.saved : [];\r\n  const allCurrencies =\r\n    tempContext &&\r\n    tempContext.response &&\r\n    tempContext.response.data &&\r\n    tempContext.response.data.exchangeRates\r\n      ? JSON.parse(tempContext.response.data.exchangeRates)\r\n      : [];\r\n  const customList =\r\n    savedCurrenciesData.length > 0\r\n      ? savedCurrenciesData.map((item, index) => {\r\n          if (\r\n            savedCurrenciesData.lenght === 0 ||\r\n            allCurrencies.length === 0 ||\r\n            item === null\r\n          ) {\r\n            return { content: <div key={`test${index}`}></div> };\r\n          }\r\n          const individualCurrency = allCurrencies.filter(globalItem => {\r\n            return globalItem.name === item;\r\n          })[0];\r\n          return {\r\n            content: (\r\n              <RowElement>\r\n                <div className={RowCell}>{individualCurrency.name}</div>\r\n                <div className={RowCell}>{individualCurrency.buy.value}</div>\r\n                <div className={RowCell}>{individualCurrency.sell.value}</div>\r\n              </RowElement>\r\n            ),\r\n            Identifier: individualCurrency.name\r\n          };\r\n        })\r\n      : [];\r\n  // const newCustomList = JSON.parse(JSON.stringify(customList));\r\n  const onSort = sortedList => {\r\n    const newSavedCurrenciesData = sortedList.map(index => index.Identifier);\r\n    tempContext.addCurrencies(newSavedCurrenciesData);\r\n    reactLocalStorage.setObject(\"btSavedCurrencies\", newSavedCurrenciesData);\r\n  };\r\n  const placeholder = <div className=\"placeholderContent\">Trage AICI</div>;\r\n  return (\r\n    <div>\r\n      <RowElement key={`currency$Key-1`}>\r\n        <RowCell>Valuta</RowCell>\r\n        <RowCell>Cumpara</RowCell>\r\n        <RowCell>Vinde</RowCell>\r\n      </RowElement>\r\n      <DragSortableList\r\n        items={customList}\r\n        placeholder={placeholder}\r\n        onSort={onSort}\r\n        dropBackTransitionDuration={0.3}\r\n        type=\"vertical\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectedCurrencies;\r\n","import { SUCCESS, FETCHING, ERROR, SELECTED } from \"./actionTypes\";\r\n\r\nexport const fetching = () => ({ type: FETCHING });\r\nexport const success = response => ({ type: SUCCESS, response });\r\nexport const error = response => ({ type: ERROR, response });\r\nexport const selected = data => ({ type: SELECTED, saved: data });\r\n","import { useReducer, useCallback } from \"react\";\r\nimport axios from \"axios\";\r\nimport { reactLocalStorage } from \"reactjs-localstorage\";\r\nimport { reducer, initialState } from \"../reducers/reducer\";\r\nimport { fetching, success, error, selected } from \"../actions/actionCreators\";\r\n\r\nconst useApiRequest = (endpoint, { verb = \"get\", params = {} } = {}) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  const makeRequest = useCallback(async () => {\r\n    dispatch(fetching());\r\n    try {\r\n      const response = await axios[verb](endpoint, params);\r\n      dispatch(success(response));\r\n    } catch (e) {\r\n      dispatch(error(e));\r\n    }\r\n  }, [endpoint, verb, params]);\r\n  // Add individual currencies\r\n  const addCurrency = useCallback(\r\n    newItem => {\r\n      if (state != null) {\r\n        const newSavedList = state && state.saved ? state.saved : [];\r\n        const indexExists = newSavedList.indexOf(newItem);\r\n        if (indexExists !== -1) {\r\n          newSavedList.splice(indexExists, 1);\r\n        } else {\r\n          newSavedList.push(newItem);\r\n        }\r\n        reactLocalStorage.setObject(\"btSavedCurrencies\", newSavedList);\r\n        dispatch(selected(newSavedList));\r\n      }\r\n    },\r\n    [state, dispatch]\r\n  );\r\n  // add all currencies\r\n  const addCurrencies = useCallback(\r\n    allItems => {\r\n      if (state != null) {\r\n        dispatch(selected(allItems));\r\n      }\r\n    },\r\n    [state, dispatch]\r\n  );\r\n  return [state, makeRequest, addCurrency, addCurrencies];\r\n};\r\n\r\nexport default useApiRequest;\r\n","import React, { useContext } from \"react\";\r\nimport ReactModal from \"react-modal\";\r\nimport { useModal } from \"react-modal-hook\";\r\nimport { AppButton } from \"../styles/App\";\r\nimport { myContext } from \"../reducers/reducer\";\r\n\r\nexport const CustomModal = () => {\r\n  const tempContext = useContext(myContext);\r\n\r\n  const selectedCurrenciesData =\r\n    tempContext &&\r\n    tempContext.response &&\r\n    tempContext.response.data &&\r\n    tempContext.response.data.exchangeRates\r\n      ? JSON.parse(tempContext.response.data.exchangeRates)\r\n      : [];\r\n  const savedCurrenciesData =\r\n    tempContext && tempContext.saved ? tempContext.saved : [];\r\n  const [showModal, hideModal] = useModal(() => {\r\n    return (\r\n      <ReactModal isOpen ariaHideApp={false}>\r\n        <p>Selecteaza valutele ce vrei sa le vezi:</p>\r\n        <div>\r\n          {selectedCurrenciesData.map((item, index) => {\r\n            return (\r\n              <AppButton\r\n                className={\r\n                  savedCurrenciesData.indexOf(item.name) !== -1\r\n                    ? \"selected\"\r\n                    : \"\"\r\n                }\r\n                key={`button${index}`}\r\n                onClick={() => {\r\n                  tempContext.addCurrency(item.name);\r\n                }}\r\n              >\r\n                {item.name}\r\n              </AppButton>\r\n            );\r\n          })}\r\n        </div>\r\n        <hr />\r\n        <button\r\n          onClick={() => {\r\n            hideModal();\r\n          }}\r\n        >\r\n          Ascunde Fereastra\r\n        </button>\r\n      </ReactModal>\r\n    );\r\n  }, [selectedCurrenciesData, savedCurrenciesData]);\r\n\r\n  return (\r\n    <AppButton\r\n      className={\"add\"}\r\n      onClick={() => {\r\n        showModal();\r\n      }}\r\n    >\r\n      Editeaza Lista\r\n    </AppButton>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\n\r\nimport { reactLocalStorage } from \"reactjs-localstorage\";\r\nimport { AppWrapper, AppHeader, AppButton } from \"./styles/App\";\r\nimport SelectedCurrencies from \"./components\";\r\nimport { myContext } from \"./reducers/reducer\";\r\nimport useApiRequest from \"./customHooks/useApiReducer\";\r\nimport { CustomModal } from \"./components/customModal\";\r\n\r\nfunction App() {\r\n  const { Provider } = myContext;\r\n  const [\r\n    { status, response, saved },\r\n    makeRequest,\r\n    addCurrency,\r\n    addCurrencies\r\n  ] = useApiRequest(\"https://cursbtserver.herokuapp.com/latest\");\r\n\r\n  useEffect(() => {\r\n    makeRequest();\r\n    const savedCurrencies = reactLocalStorage.getObject(\"btSavedCurrencies\");\r\n    if (savedCurrencies.length !== undefined) {\r\n      addCurrencies(savedCurrencies);\r\n    } else {\r\n      addCurrencies([\"GBP\", \"USD\", \"EUR\"]);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  return (\r\n    <Provider\r\n      value={{\r\n        status,\r\n        response,\r\n        saved,\r\n        makeRequest,\r\n        addCurrency,\r\n        addCurrencies\r\n      }}\r\n    >\r\n      <AppWrapper>\r\n        <AppHeader>\r\n          <div>\r\n            {response != null ? (\r\n              <div>\r\n                <AppButton\r\n                  onClick={() => {\r\n                    document.location = \"\";\r\n                  }}\r\n                >\r\n                  Reincarca\r\n                </AppButton>\r\n                <CustomModal />\r\n              </div>\r\n            ) : (\r\n              <div>Se Incarca...</div>\r\n            )}\r\n          </div>\r\n          <SelectedCurrencies />\r\n        </AppHeader>\r\n      </AppWrapper>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"./index.css\";\r\n// eslint-disable-next-line import/order\r\nimport { ModalProvider } from \"react-modal-hook\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <ModalProvider>\r\n    <App />\r\n  </ModalProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}