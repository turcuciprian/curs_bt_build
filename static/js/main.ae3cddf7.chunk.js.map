{"version":3,"sources":["serviceWorker.js","styles/App.js","actions/actionTypes.js","reducers/reducer.js","components/index.js","components/SelectedCurrencies.js","actions/actionCreators.js","useApiReducer.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","AppWrapper","styled","div","AppHeader","AppButton","button","ListCell","ListElement","li","FETCHING","type","SUCCESS","ERROR","SELECTED","initialState","status","response","selected","myContext","createContext","reducer","state","payload","SelectedCurrencies","tempContext","useContext","selectedCurrenciesData","JSON","parse","data","exchangeRates","console","log","length","map","item","index","key","name","buy","value","sell","fetching","success","error","useApiRequest","endpoint","verb","params","useReducer","dispatch","makeRequest","useCallback","a","axios","App","Provider","useEffect","onClick","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ae3cddf7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import styled from \"styled-components\";\n\nexport const AppWrapper = styled.div`\n  text-align: center;\n`;\n\nexport const AppHeader = styled.div`\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n\nexport const AppButton = styled.button`\n  padding: 10px 30px;\n  background: blue;\n  color: white;\n`;\n\nexport const ListCell = styled.div`\n  display: inline-block;\n  padding: 5px 10px;\n  margin: 10px;\n  min-width: 100px;\n`;\n\nexport const ListElement = styled.li`\n  list-style-type: none;\n  margin: 10px 0px;\n  background: #000;\n`;\n","const apiPrefix = \"useApiRequest/\";\nconst selectedPref = \"selectedData/\";\nexport const FETCHING = () => ({ type: `${apiPrefix}FETCHING` });\nexport const SUCCESS = () => ({ type: `${apiPrefix}SUCCESS` });\nexport const ERROR = () => ({ type: `${apiPrefix}ERROR` });\nexport const SELECTED = () => ({ type: `${selectedPref}SELECTED` });\n","import { createContext } from \"react\";\nimport { FETCHING, SUCCESS, ERROR, SELECTED } from \"../actions/actionTypes\";\nexport const initialState = {\n  status: null,\n  response: null,\n  selected: null\n};\n\nexport const myContext = createContext(initialState);\nexport const reducer = (state = initialState, { type, response } = {}) => {\n  //\n  switch (type) {\n    case FETCHING:\n      return { ...initialState, status: FETCHING };\n    case SUCCESS:\n      return { ...state, status: SUCCESS, response };\n    case ERROR:\n      return { ...state, status: ERROR, response };\n    case SELECTED:\n      return { ...initialState, status: SELECTED, payload: state };\n    default:\n      return state;\n  }\n};\n","import SelectedCurrencies from \"./SelectedCurrencies\";\n\nexport default SelectedCurrencies;\n","import React, { useContext } from \"react\";\nimport { myContext } from \"../reducers/reducer\";\nimport { ListCell, ListElement } from \"../styles/App\";\n\nconst SelectedCurrencies = () => {\n  const tempContext = useContext(myContext);\n  const selectedCurrenciesData =\n    tempContext && tempContext.response\n      ? JSON.parse(tempContext.response.data.exchangeRates)\n      : [];\n  // eslint-disable-next-line no-console\n  console.log(selectedCurrenciesData);\n\n  return (\n    <div>\n      <ul>\n        {selectedCurrenciesData.length > 0\n          ? selectedCurrenciesData.map((item, index) => {\n            return (\n              <ListElement key={`currency$Key${index}`}>\n                <ListCell>{item.name}</ListCell>\n                <ListCell>{item.buy.value}</ListCell>\n                <ListCell>{item.sell.value}</ListCell>\n              </ListElement>\n            );\n          })\n          : \"\"}\n        <li></li>\n      </ul>\n    </div>\n  );\n};\n\nexport default SelectedCurrencies;\n","import { SUCCESS, FETCHING, ERROR } from \"./actionTypes\";\n\nexport const fetching = () => ({ type: FETCHING });\nexport const success = response => ({ type: SUCCESS, response });\nexport const error = response => ({ type: ERROR, response });\nexport const selected = payload => ({ type: ERROR, payload });\n","import { useReducer, useCallback } from \"react\";\nimport axios from \"axios\";\nimport { reducer, initialState } from \"./reducers/reducer\";\nimport { fetching, success, error } from \"./actions/actionCreators\";\n\nconst useApiRequest = (endpoint, { verb = \"get\", params = {} } = {}) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const makeRequest = useCallback(async () => {\n    dispatch(fetching());\n    try {\n      const response = await axios[verb](endpoint, params);\n      dispatch(success(response));\n    } catch (e) {\n      dispatch(error(e));\n    }\n  }, [endpoint, verb, params]);\n  return [state, makeRequest];\n};\n\nexport default useApiRequest;\n","import React, { useEffect } from \"react\";\n\nimport { AppWrapper, AppHeader, AppButton } from \"./styles/App\";\nimport SelectedCurrencies from \"./components\";\nimport { myContext } from \"./reducers/reducer\";\nimport useApiRequest from \"./useApiReducer\";\n\nfunction App() {\n  const { Provider } = myContext;\n  const [{ status, response }, makeRequest] = useApiRequest(\n    \"https://cursbtserver.herokuapp.com/latest\"\n  );\n  useEffect(() => {\n    makeRequest();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return (\n    <Provider value={{ status, response }}>\n      <AppWrapper>\n        <AppHeader>\n          <AppButton onClick={makeRequest}>Refresh</AppButton>\n          <SelectedCurrencies />\n        </AppHeader>\n      </AppWrapper>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}